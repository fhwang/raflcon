<%
record = form.object
unless defined?(palette_clones_input_width) && !palette_clones_input_width.nil?
  palette_clones_input_width = true
end
class_name = record.class.name.gsub(/.*::/, '').underscore.downcase
associated_class_name = column.associated_class.name.underscore
text_field_id = "#{associated_class_name}_autocomplete_input"
palette_id = "#{associated_class_name}_autocomplete_palette"
hidden_field_id = "#{class_name}_#{column.association_foreign_key}"
associated = record.send(column.name)
if associated
  associated_id = associated.id
else
  associated_id = nil
end
autocompleter_js_var = "#{associated_class_name}_autocompleter"
target = AdminAssistant::AssociationTarget.new column.associated_class
%>
<%= text_field_tag(
  text_field_id, target.assoc_value(record.send(column.name)),
  :id => text_field_id
) %>
<%=
  form.hidden_field(column.association_foreign_key, :id => hidden_field_id)
%>
<div id="<%= palette_id %>" class="autocomplete_palette" style="display:none"></div>

<div id="clear_<%= associated_class_name %>_link" style="display:none; padding: 5px">
<%= link_to_function("Clear #{associated_class_name}", "") %>
</div>

<%
auth_token = if protect_against_forgery?
  form_authenticity_token
else
  ''
end
options = {
  :includeBlank => select_options[:include_blank],
  :paletteClonesInputWidth => palette_clones_input_width,
  :parameters => "authenticity_token=#{auth_token}"
}
%>
<script type="text/javascript">
new AdminAssistant.RestrictedAutocompleter(
  "<%= associated_class_name %>",
  "<%= hidden_field_id %>",
  "/<%= controller.controller_path %>/autocomplete_<%= associated_class_name %>",
  <%= options.to_json %>
);
</script>

